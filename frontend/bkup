package main

import (
	"database/sql"
	"fmt"
	"html/template"
	"log"
	"net/http"

	_ "github.com/lib/pq"
)

type Food struct {
	ID       int
	Name     string
	Calories int
	Proteine int
}

type Weight struct {
	ID   int
	Name string
	Reps int
	Sets int
}

type Cardio struct {
	ID       int
	Name     string
	Distance int
	Duration int
}

type PageData struct {
	Foods   []Food
	Weights []Weight
	Cardios []Cardio
}

func main() {
	// Connect to PostgreSQL database
	db, err := sql.Open("postgres", "postgresql://postgres:123@localhost/hestia?sslmode=disable")
	if err != nil {
		log.Fatal("Error connecting to the database:", err)
	}
	defer db.Close()

	// Define the HTML template for the navigation
	var navTmpl = template.Must(template.New("nav").Parse(`
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>HESTIA - Navigation</title>
			<style>
				body {
					background-color: #222;
					color: #fff;
				}
				a {
					color: #fff;
					text-decoration: none;
				}
			</style>
        </head>
        <body>
            <a href="/food">Food</a> | <a href="/weight">Weight</a> | <a href="/cardio">Cardio</a> | <a href="/day">Day</a>
        </body>
        </html>
    `))

	// Serve the HTML content for the navigation
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		if err := navTmpl.Execute(w, nil); err != nil {
			log.Println("Error executing template:", err)
			http.Error(w, "Internal server error", http.StatusInternalServerError)
			return
		}
	})

	// Define the HTML template for the Food table
	var foodTmpl = template.Must(template.New("food").Parse(`
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>HESTIA - Food Table</title>
			<style>
				body {
					background-color: #222;
					color: #fff;
				}
				table {
					border-collapse: collapse;
					width: 100%;
				}
				th, td {
					padding: 8px;
					text-align: left;
					border-bottom: 1px solid #444;
				}
				th {
					background-color: #333;
				}
				tr:nth-child(even) {
					background-color: #333;
				}
			</style>
        </head>
        <body>
			<a href="/">Navigation</a> | <a href="/weight">Weight</a> | <a href="/cardio">Cardio</a> | <a href="/day">Day</a>
            <h1>Food Table</h1>
            <table>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Calories</th>
                    <th>Proteine</th>
                </tr>
                {{range .}}
                <tr>
                    <td>{{.ID}}</td>
                    <td>{{.Name}}</td>
                    <td>{{.Calories}}</td>
                    <td>{{.Proteine}}</td>
                </tr>
                {{end}}
            </table>
        </body>
        </html>
    `))

	// Serve the HTML content for the Food table
	http.HandleFunc("/food", func(w http.ResponseWriter, r *http.Request) {
		// Query the database for existing food entries
		rows, err := db.Query("SELECT * FROM Food")
		if err != nil {
			log.Fatal("Error querying the database:", err)
		}
		defer rows.Close()

		// Retrieve data from rows
		var foods []Food
		for rows.Next() {
			var food Food
			if err := rows.Scan(&food.ID, &food.Name, &food.Calories, &food.Proteine); err != nil {
				log.Fatal("Error scanning row:", err)
			}
			foods = append(foods, food)
		}

		// Execute the HTML template to display the Food table
		if err := foodTmpl.Execute(w, foods); err != nil {
			log.Println("Error executing template:", err)
			http.Error(w, "Internal server error", http.StatusInternalServerError)
			return
		}
	})

	// Define the HTML template for the Weight table
	var weightTmpl = template.Must(template.New("weight").Parse(`
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>HESTIA - Weight Table</title>
			<style>
				body {
					background-color: #222;
					color: #fff;
				}
				table {
					border-collapse: collapse;
					width: 100%;
				}
				th, td {
					padding: 8px;
					text-align: left;
					border-bottom: 1px solid #444;
				}
				th {
					background-color: #333;
				}
				tr:nth-child(even) {
					background-color: #333;
				}
			</style>
        </head>
        <body>
			<a href="/">Navigation</a> | <a href="/food">Food</a> | <a href="/cardio">Cardio</a> | <a href="/day">Day</a>
            <h1>Weight Table</h1>
            <table>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Reps</th>
                    <th>Sets</th>
                </tr>
                {{range .}}
                <tr>
                    <td>{{.ID}}</td>
                    <td>{{.Name}}</td>
                    <td>{{.Reps}}</td>
                    <td>{{.Sets}}</td>
                </tr>
                {{end}}
            </table>
        </body>
        </html>
    `))

	// Serve the HTML content for the Weight table
	http.HandleFunc("/weight", func(w http.ResponseWriter, r *http.Request) {
		// Query the database for existing weight entries
		rows, err := db.Query("SELECT * FROM Weight")
		if err != nil {
			log.Fatal("Error querying the database:", err)
		}
		defer rows.Close()

		// Retrieve data from rows
		var weights []Weight
		for rows.Next() {
			var weight Weight
			if err := rows.Scan(&weight.ID, &weight.Name, &weight.Reps, &weight.Sets); err != nil {
				log.Fatal("Error scanning row:", err)
			}
			weights = append(weights, weight)
		}

		// Execute the HTML template to display the Weight table
		if err := weightTmpl.Execute(w, weights); err != nil {
			log.Println("Error executing template:", err)
			http.Error(w, "Internal server error", http.StatusInternalServerError)
			return
		}
	})

	// Define the HTML template for the Cardio table
	var cardioTmpl = template.Must(template.New("cardio").Parse(`
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>HESTIA - Cardio Table</title>
			<style>
				body {
					background-color: #222;
					color: #fff;
				}
				table {
					border-collapse: collapse;
					width: 100%;
				}
				th, td {
					padding: 8px;
					text-align: left;
					border-bottom: 1px solid #444;
				}
				th {
					background-color: #333;
				}
				tr:nth-child(even) {
					background-color: #333;
				}
			</style>
        </head>
        <body>
			<a href="/">Navigation</a> | <a href="/food">Food</a> | <a href="/weight">Weight</a> | <a href="/day">Day</a>
            <h1>Cardio Table</h1>
            <table>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Distance</th>
                    <th>Duration</th>
                </tr>
                {{range .}}
                <tr>
                    <td>{{.ID}}</td>
                    <td>{{.Name}}</td>
                    <td>{{.Distance}}</td>
                    <td>{{.Duration}}</td>
                </tr>
                {{end}}
            </table>
        </body>
        </html>
    `))

	// Serve the HTML content for the Cardio table
	http.HandleFunc("/cardio", func(w http.ResponseWriter, r *http.Request) {
		// Query the database for existing cardio entries
		rows, err := db.Query("SELECT * FROM Cardio")
		if err != nil {
			log.Fatal("Error querying the database:", err)
		}
		defer rows.Close()

		// Retrieve data from rows
		var cardios []Cardio
		for rows.Next() {
			var cardio Cardio
			if err := rows.Scan(&cardio.ID, &cardio.Name, &cardio.Distance, &cardio.Duration); err != nil {
				log.Fatal("Error scanning row:", err)
			}
			cardios = append(cardios, cardio)
		}

		// Execute the HTML template to display the Cardio table
		if err := cardioTmpl.Execute(w, cardios); err != nil {
			log.Println("Error executing template:", err)
			http.Error(w, "Internal server error", http.StatusInternalServerError)
			return
		}
	})

	// Start the HTTP server
	fmt.Println("Server listening on port 8080")
	if err := http.ListenAndServe(":8080", nil); err != nil {
		log.Fatal("Error starting server:", err)
	}
}
